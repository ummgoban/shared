name: Update Version From Comment

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-version:
    # PR 코멘트인 경우에만 실행
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR details
        id: pr-details
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/pulls/{pull_number}
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          pull_number: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check branch name and extract version from comment
        id: check-branch-and-version
        run: |
          HEAD_REF="${{ fromJson(steps.pr-details.outputs.data).head.ref }}"
          echo "HEAD_REF=$HEAD_REF" >> $GITHUB_OUTPUT

          # auto-changelog-update 브랜치인지 확인
          if [[ "$HEAD_REF" == "auto-changelog-update" ]]; then
            echo "IS_TARGET_BRANCH=true" >> $GITHUB_OUTPUT
          else
            echo "IS_TARGET_BRANCH=false" >> $GITHUB_OUTPUT
            echo "브랜치가 auto-changelog-update가 아닙니다: $HEAD_REF"
            exit 0
          fi

          # 코멘트에서 버전 추출
          # "/"로 시작하는 댓글만 명령어로 인식
          # (version:x.y.z 형식)
          COMMENT="${{ github.event.comment.body }}"
          if [[ "$COMMENT" =~ ^/version:([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "HAS_VERSION=true" >> $GITHUB_OUTPUT
            echo "추출된 버전: $VERSION"
          else
            echo "HAS_VERSION=false" >> $GITHUB_OUTPUT
            echo "코멘트에서 버전을 찾을 수 없습니다."
          fi

      - name: Add reaction to comment
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: '+1'

      # auto-changelog-update 브랜치 체크아웃
      - name: Checkout PR branch
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        run: |
          git fetch origin
          git checkout ${{ steps.check-branch-and-version.outputs.HEAD_REF }}

      # 최근 커밋 되돌리기
      - name: Undo last commit
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 최근 커밋 되돌리기 (hard reset)
          git reset --hard HEAD~1
          echo "최근 커밋을 되돌렸습니다."

      # Node.js 설정
      - name: Setup Node.js
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'
          scope: '@ummgoban'

      # Yarn 설정
      - name: Setup Yarn
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        run: |
          npm install -g corepack@latest
          corepack enable

      # 의존성 설치
      - name: Install dependencies
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        run: yarn install

      # 버전 업데이트
      - name: Update version
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        run: |
          # standard-version 실행 (--release-as 옵션으로 버전 지정)
          yarn release --release-as ${{ steps.check-branch-and-version.outputs.VERSION }} --skip.tag
          echo "yarn release가 완료되었습니다."

      # 변경사항 커밋 및 푸시
      - name: Commit and push changes
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        run: |
          git add .
          git commit -m "chore(release): 버전 ${{ steps.check-branch-and-version.outputs.VERSION }}로 업데이트"
          git push --force origin ${{ steps.check-branch-and-version.outputs.HEAD_REF }}

      # 완료 코멘트
      - name: Comment on completion
        if: steps.check-branch-and-version.outputs.IS_TARGET_BRANCH == 'true' && steps.check-branch-and-version.outputs.HAS_VERSION == 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            @${{ github.event.comment.user.login }} 버전 업데이트가 완료되었습니다! ✅

            버전: ${{ steps.check-branch-and-version.outputs.VERSION }}

name: Update Version From Comment

on:
  issue_comment:
    types: [created]
  pull_request:
    branches: [auto-changelog-update]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-version:
    # PR 코멘트이고 auto-changelog-update 브랜치인 경우에만 실행
    if: ${{ github.event.issue.pull_request }} && ${{ github.event.pull_request.head.ref == 'auto-changelog-update' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from comment
        id: extract-version
        run: |
          COMMENT=$(echo "${{ github.event.comment.body }}" | xargs)

          # "/"로 시작하는 댓글만 명령어로 인식
          if [[ "$COMMENT" != /* ]]; then
            echo "Is not a command."
            exit 0
          fi

          # @docs comment format
          #
          # /version
          # @description 
          #   - version:x.y.z 형식
          # @pattern
          #   - /version:[x.y.z]+(-[\w\.]+)?
          #   - /version:[patch|minor|major|nightly|beta|alpha|rc]
          # @example
          # ```
          # /version:1.0.0
          # /version:1.0.0-alpha.1
          # /version:patch
          # /version:minor
          # /version:major
          # /version:nightly # nightly 버전으로 업데이트 [x].[y].[z]-nightly.[yyyyMMDD].[6-letter-commitHash]
          # ```
          # /skip
          # @description 
          #   - 해당 버전 스킵 후 pull request close
          #   - 수동으로 pull request close와 같은 기능 수행
          # /reopen
          # @description 
          #   - pull request 재개


          # 특정 버전으로 업데이트
          if [[ "$COMMENT" =~ ^/version:([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?) ]]; then
            COMMENT_TYPE="version"
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "추출된 버전: $VERSION"
          # 키워드로 버전 업데이트
          elif [[ "$COMMENT" =~ ^/version:([patch|minor|major|nightly|beta|alpha|rc]) ]]; then
            COMMENT_TYPE="version"
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "추출된 버전 업데이트 타입: $VERSION"
          # skip 커멘드
          elif [[ "$COMMENT" =~ ^/skip ]]; then
            echo "COMMENT_TYPE=skip" >> $GITHUB_OUTPUT
            echo "버전 스킵"
          # reopen 커멘드
          elif [[ "$COMMENT" =~ ^/reopen ]]; then
            echo "COMMENT_TYPE=reopen" >> $GITHUB_OUTPUT
            echo "pull request 재개"
          else
            echo "COMMENT_TYPE=invalid" >> $GITHUB_OUTPUT
            echo "잘못된 코멘트입니다."
          fi

      - name: Comment Invalid Version
        if: steps.extract-version.outputs.COMMENT_TYPE == 'invalid'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            @${{ github.event.comment.user.login }} 코멘트를 확인할 수 없습니다.

            본문에서 명령어를 확인해주세요.

      - name: Add reaction to comment (:-1)
        if: steps.extract-version.outputs.COMMENT_TYPE == 'invalid'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: '-1'

      - name: Finish Action (invalid comment)
        if: steps.extract-version.outputs.COMMENT_TYPE == 'invalid'
        run: |
          echo "Invalid comment."
          exit 0

      - name: Add reaction to comment (:+1)
        if: steps.extract-version.outputs.COMMENT_TYPE != 'invalid'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: '+1'

      # close pull request
      - name: 'Skip PR (comment: /skip)'
        if: steps.extract-version.outputs.COMMENT_TYPE == 'skip'
        run: |
          gh pr close ${{ github.event.issue.number }}
          exit 0

      # reopen pull request
      - name: 'Reopen PR (comment: /reopen)'
        if: steps.extract-version.outputs.COMMENT_TYPE == 'reopen'
        run: |
          gh pr reopen ${{ github.event.issue.number }}
          exit 0

      # Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'
          scope: '@ummgoban'

      # Yarn 설정
      - name: Setup Yarn
        run: |
          npm install -g corepack@latest
          corepack enable

      - name: Setup Node.js 20.x for yarn
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: yarn

      # 캐쉬 가져오기
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      # yarn 캐쉬 저장
      - name: Cache yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
            .yarn/cache
            .yarn/unplugged
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 의존성 설치 (cache가 있으면 사용)
      - name: Install dependencies
        run: |
          yarn install --immutable

      # 버전 업데이트
      - name: Update version
        run: |
          # checkout auto-changelog-update branch
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # auto-changelog-update 브랜치로 checkout
          git fetch origin
          git checkout auto-changelog-update
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"

          # 최근 커밋 revert 하기
          git revert HEAD --no-commit

          # nightly 버전 업데이트 
          if [[ "${{ steps.extract-version.outputs.VERSION }}" == "nightly" ]]; then
            # 이전 버전 [x].[y].[z] 추출
            VERSION=$(node -p "require('./package.json').version")
            VERSION=$(echo $VERSION | cut -d '-' -f 1)
            echo "previous version: $VERSION"

            # hash 추출
            HASH=$(git rev-parse HEAD)
            HASH=$(echo $HASH | cut -c 1-6)
            echo "hash: $HASH"

            # 날짜 추출
            DATE=$(date +%Y%m%d)
            echo "date: $DATE"

            # nightly 버전으로 업데이트
            NIGHTLY_VERSION="${VERSION}-nightly.${DATE}.${HASH}"
            echo "nightly version: $NIGHTLY_VERSION"

            yarn release --release-as $NIGHTLY_VERSION --skip.tag
          # alpha, beta, rc 버전 업데이트
          elif [[ "${{ steps.extract-version.outputs.VERSION }}" == "alpha" || "${{ steps.extract-version.outputs.VERSION }}" == "beta" || "${{ steps.extract-version.outputs.VERSION }}" == "rc" ]]; then
            # 이전 버전 [x].[y].[z] 추출
            VERSION=$(node -p "require('./package.json').version")

            VERSION_XYZ=$(echo $VERSION | cut -d '-' -f 1)
            echo "previous version: $VERSION_XYZ"

            VERSION_TYPE_RAW=$(echo $VERSION | cut -d '-' -f 2)
            VERSION_TYPE_NUMBER=$(echo $VERSION_TYPE_RAW | cut -d '.' -f 2)
            VERSION_TYPE=$(echo $VERSION_TYPE_RAW | cut -d '.' -f 1)
            echo "version type: $VERSION_TYPE ($VERSION_TYPE_NUMBER)"

            # 이전 버전과 steps.extract-version.outputs.VERSION의 타입이 같은 경우 [type].[n]을 n+1로 수정
            if [[ "${{ steps.extract-version.outputs.VERSION }}" == "$VERSION_TYPE" ]]; then
              VERSION_TYPE_NUMBER=$(($VERSION_TYPE_NUMBER + 1))
              UPDATE_VERSION="${VERSION_XYZ}-${VERSION_TYPE}.${VERSION_TYPE_NUMBER}"
            # 그렇지 않은 경우 [type].0 으로 버전 업데이트
            else
              UPDATE_VERSION="${VERSION_XYZ}-${VERSION_TYPE}.0"
            fi

            yarn release --release-as $UPDATE_VERSION --skip.tag
          else
            yarn release --release-as ${{ steps.extract-version.outputs.VERSION }} --skip.tag
          fi

          # commit and push
          git add package.json yarn.lock CHANGELOG.md
          git status
          git commit -m "chore(release): 버전 ${{ steps.extract-version.outputs.VERSION }}로 업데이트"
          git push origin auto-changelog-update

      # 완료 코멘트
      - name: Comment on completion
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            @${{ github.event.comment.user.login }} 버전 업데이트가 완료되었습니다! ✅

            버전: ${{ steps.extract-version.outputs.VERSION }}

            \* pull request 이름을 변경해주세요

            ```bash
            release: v${{ steps.extract-version.outputs.VERSION }}
            ```

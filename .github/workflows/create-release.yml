name: Create Release & Publish Package

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-release:
    # PR이 머지되었고 PR 제목이 'release: v'로 시작하는 경우에만 실행
    if: "github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'release: v')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from PR title
        id: extract-version
        run: |
          # package.json에서 버전 추출
          VERSION=$(node -p "require('./package.json').version")
          echo "current version: $VERSION"

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Create and push tag
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          TAG_NAME="v${{ steps.extract-version.outputs.VERSION }}"
          echo "Creating tag: $TAG_NAME"

          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          git push origin $TAG_NAME

      - name: Read CHANGELOG
        id: changelog
        run: |
          # CHANGELOG.md에서 현재 버전의 변경 사항을 추출
          VERSION="${{ steps.extract-version.outputs.VERSION }}"
          CHANGELOG_CONTENT=$(sed -n "/### \[${VERSION}\]/,/### \[/p" CHANGELOG.md | sed '$d')

          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract-version.outputs.VERSION }}
          release_name: v${{ steps.extract-version.outputs.VERSION }}
          body: |
            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          draft: false
          prerelease: false
  publish:
    needs: create-release
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run common checks
        id: pass
        uses: ./.github/actions/pass

      - name: Publish
        if: steps.pass.outputs.all_pass == 'true'
        run: |
          # create .env
          echo "NPM_TOKEN=${{ secrets.NPM_TOKEN }}" > .env
          # publish
          sh .script/publish.sh
          # remove .env
          rm .env
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
